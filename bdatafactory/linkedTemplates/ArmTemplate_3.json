{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bdatafactory"
		},
		"event_trigger_filecreate_properties_bdata_adf_variable_append_pl_parameters_FilePath": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"event_trigger_filecreate_properties_bdata_adf_variable_append_pl_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"event_trigger_filecreate_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/6c405d27-de5e-483c-9a68-0aaaad20b363/resourceGroups/big_data/providers/Microsoft.Storage/storageAccounts/bdatablob"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Delete files with Azure Data Factory FileSystem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_FileShare_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"recursive": true
						}
					}
				],
				"parameters": {
					"FolderPath": {
						"type": "String",
						"defaultValue": "/<mycontainer>/<myfolder>/"
					}
				},
				"folder": {
					"name": "Delete Activity"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bdata_adf_email_notify_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF pipeline with Email notifications",
				"activities": [
					{
						"name": "Validate filename list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filenames Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_check",
							"value": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load data into SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Validate filename list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data Blob to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"store_id": "store_id",
												"date_id": "date_id",
												"product_id": "product_id",
												"stock_amt": "stock_amt"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_storesales_storesall",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "storesales",
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_storesales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Logging Copy Data",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Copy Data Blob to SQL",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_logging",
										"value": {
											"value": "@concat('Copy Data Blob to SQL|Copy|',pipeline().DataFactory,'|',activity('Copy Data Blob to SQL').Duration,'|',activity('Copy Data Blob to SQL').Error,'|',activity('Copy Data Blob to SQL').ExecutionDetails,'|',activity('Copy Data Blob to SQL').ExecutionEndTime,'|',activity('Copy Data Blob to SQL').ExecutionStartTime,'|',activity('Copy Data Blob to SQL').JobId,'|',activity('Copy Data Blob to SQL').Output,'|',pipeline().Pipeline,'|',activity('Copy Data Blob to SQL').ActivityRunId,'|',activity('Copy Data Blob to SQL').Status,'|',activity('Copy Data Blob to SQL').StatusCode)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy Data Errors",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Data Blob to SQL",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-31.eastus.logic.azure.com:443/workflows/001cc7857fac4b41bd535a8ca3ec9e3e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=f-qhwimTZz8R7fgJ3nz5VTqx0sPOD4akHLeBIDDt5Mg",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"DataFactoryName": "@{pipeline().DataFactory}",
											"PipelineName": "@{pipeline().Pipeline}",
											"ErrorMessage": "@{activity('Copy Data Blob to SQL').Error.message}",
											"EmailTo": "@pipeline().parameters.var_email_address"
										}
									}
								}
							]
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 01",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 01').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 01",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_01/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Logging Metadata",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_logging",
							"value": {
								"value": "@concat('Metadata Store 01|Copy|',pipeline().DataFactory,'|',activity('Metadata Store 01').Duration,'|',activity('Metadata Store 01').Error,'|',activity('Metadata Store 01').ExecutionDetails,'|',activity('Metadata Store 01').ExecutionEndTime,'|',activity('Metadata Store 01').ExecutionStartTime,'|',activity('Metadata Store 01').JobId,'|',activity('Metadata Store 01').Output,'|',pipeline().Pipeline,'|',activity('Metadata Store 01').ActivityRunId,'|',activity('Metadata Store 01').Status,'|',activity('Metadata Store 01').StatusCode)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Logging to SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Logging Metadata",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Load data into SQL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_logging')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_adf_pipeline_log_update]",
										"storedProcedureParameters": {
											"ActivityTask": {
												"value": {
													"value": "@split(item(),'|')[0]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityType": {
												"value": {
													"value": "@split(item(),'|')[1]",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactory": {
												"value": {
													"value": "@split(item(),'|')[2]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Duration": {
												"value": {
													"value": "@split(item(),'|')[3]",
													"type": "Expression"
												},
												"type": "TimeSpan"
											},
											"Error": {
												"value": {
													"value": "@split(item(),'|')[4]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDetails": {
												"value": {
													"value": "@split(item(),'|')[5]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionEndTime": {
												"value": {
													"value": "@split(item(),'|')[6]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ExecutionStartTime": {
												"value": {
													"value": "@split(item(),'|')[7]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"JobId": {
												"value": {
													"value": "@split(item(),'|')[8]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Output": {
												"value": {
													"value": "@split(item(),'|')[9]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline": {
												"value": {
													"value": "@split(item(),'|')[10]",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@split(item(),'|')[11]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@split(item(),'|')[12]",
													"type": "Expression"
												},
												"type": "String"
											},
											"StatusCode": {
												"value": {
													"value": "@split(item(),'|')[13]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_LS",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Check Failed Status",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Stored Procedure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(split(item(),'|')[12], 'Failed')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Failed Email Notification",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "Get Error Message",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-29.eastus.logic.azure.com:443/workflows/b254c91f0139447aa4bf23657e729aff/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=c1ZLiBHQ2uyBi47Hc88M6S_JMPEbamGSJYEeI1YFQbU",
													"method": "POST",
													"headers": {
														"Content-Type": "application/json"
													},
													"body": {
														"DataFactoryName": "@{pipeline().DataFactory}",
														"PipelineName": "@{pipeline().Pipeline}",
														"ErrorMessage": "@variables('var_activity_error_message')",
														"EmailTo": "@pipeline().parameters.var_email_address"
													}
												}
											},
											{
												"name": "Get Error Message",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_activity_error_message",
													"value": {
														"value": "@split(item(),'|')[4]",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"var_email_address": {
						"type": "String",
						"defaultValue": "rimayev@hotmail.com"
					}
				},
				"variables": {
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_check": {
						"type": "Array"
					},
					"var_logging": {
						"type": "Array"
					},
					"var_logging_line": {
						"type": "Array"
					},
					"var_activity_status": {
						"type": "String"
					},
					"var_activity_error_message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sample Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bdata_adf_logging_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Validate filename list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filenames Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_check",
							"value": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load data into SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Validate filename list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data Blob to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"store_id": "store_id",
												"date_id": "date_id",
												"product_id": "product_id",
												"stock_amt": "stock_amt"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_storesales_storesall",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "storesales",
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_storesales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Logging Copy Data",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Copy Data Blob to SQL",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_logging",
										"value": {
											"value": "@concat('Copy Data Blob to SQL|Copy|',pipeline().DataFactory,'|',activity('Copy Data Blob to SQL').Duration,'|',activity('Copy Data Blob to SQL').Error,'|',activity('Copy Data Blob to SQL').ExecutionDetails,'|',activity('Copy Data Blob to SQL').ExecutionEndTime,'|',activity('Copy Data Blob to SQL').ExecutionStartTime,'|',activity('Copy Data Blob to SQL').JobId,'|',activity('Copy Data Blob to SQL').Output,'|',pipeline().Pipeline,'|',activity('Copy Data Blob to SQL').ActivityRunId,'|',activity('Copy Data Blob to SQL').Status,'|',activity('Copy Data Blob to SQL').StatusCode)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 01",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 01').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 01",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_01/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Logging Metadata",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_logging",
							"value": {
								"value": "@concat('Metadata Store 01|Copy|',pipeline().DataFactory,'|',activity('Metadata Store 01').Duration,'|',activity('Metadata Store 01').Error,'|',activity('Metadata Store 01').ExecutionDetails,'|',activity('Metadata Store 01').ExecutionEndTime,'|',activity('Metadata Store 01').ExecutionStartTime,'|',activity('Metadata Store 01').JobId,'|',activity('Metadata Store 01').Output,'|',pipeline().Pipeline,'|',activity('Metadata Store 01').ActivityRunId,'|',activity('Metadata Store 01').Status,'|',activity('Metadata Store 01').StatusCode)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Logging to SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Logging Metadata",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Load data into SQL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_logging')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored Procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_adf_pipeline_log_update]",
										"storedProcedureParameters": {
											"ActivityTask": {
												"value": {
													"value": "@split(item(),'|')[0]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityType": {
												"value": {
													"value": "@split(item(),'|')[1]",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactory": {
												"value": {
													"value": "@split(item(),'|')[2]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Duration": {
												"value": {
													"value": "@split(item(),'|')[3]",
													"type": "Expression"
												},
												"type": "TimeSpan"
											},
											"Error": {
												"value": {
													"value": "@split(item(),'|')[4]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDetails": {
												"value": {
													"value": "@split(item(),'|')[5]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionEndTime": {
												"value": {
													"value": "@split(item(),'|')[6]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ExecutionStartTime": {
												"value": {
													"value": "@split(item(),'|')[7]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"JobId": {
												"value": {
													"value": "@split(item(),'|')[8]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Output": {
												"value": {
													"value": "@split(item(),'|')[9]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline": {
												"value": {
													"value": "@split(item(),'|')[10]",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@split(item(),'|')[11]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@split(item(),'|')[12]",
													"type": "Expression"
												},
												"type": "String"
											},
											"StatusCode": {
												"value": {
													"value": "@split(item(),'|')[13]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_LS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"variables": {
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_check": {
						"type": "Array"
					},
					"var_logging": {
						"type": "Array"
					},
					"var_logging_line": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Sample Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bdata_adf_variable_append_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get FeedType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FeedType",
							"value": {
								"value": "@replace(pipeline().parameters.FileName, 'Sales.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Daily DataFeed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get FeedType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FeedType'), 'Daily')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Data Daily",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"Date": "Date",
												"Account ID": "Account_ID",
												"Sales": "Sales"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_bgdata_daily",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@pipeline().parameters.FilePath",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_bgdata_daily",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "If Monthly DataFeed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get FeedType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FeedType'), 'Monthly')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Data Monthly",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"Year": "Year",
												"Month": "Month",
												"Account ID": "Account_ID",
												"Total Sales": "Total_Sales"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_bgdata_monthly",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												},
												"FilePath": {
													"value": "@pipeline().parameters.FilePath",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_bgdata_monthly",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"FilePath": {
						"type": "String",
						"defaultValue": "salesdata/"
					},
					"FileName": {
						"type": "String",
						"defaultValue": "DailySales.csv"
					}
				},
				"variables": {
					"FeedType": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sample Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bdata_adf_variable_set_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Metadata Store 02",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store02",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 02",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 02').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 02",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_02/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Validate filename list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filenames Store 02",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filenames Store 03",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filenames Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_check",
							"value": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Metadata Store 03",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store03",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 03",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 03",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 03').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 03",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_03/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Load data into SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Validate filename list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data Blob to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"store_id": "store_id",
												"date_id": "date_id",
												"product_id": "product_id",
												"stock_amt": "stock_amt"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_storesales_storesall",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "storesales",
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_storesales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 01",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 01').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 01",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_01/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_check": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Sample Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bdata_adf_variable_set_single_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_name",
							"value": {
								"value": "@activity('Metadata Store 01').output.itemName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01_single",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName"
							]
						}
					},
					{
						"name": "Copy Data to SQL - V",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Data to SQL - D",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"store_id": "store_id",
									"date_id": "date_id",
									"product_id": "product_id",
									"stock_amt": "stock_amt"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlob_storesales_storesall",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": "storesales-source/store_01",
									"FileName": {
										"value": "@variables('var_file_name')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_storesales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Data to SQL - D",
						"description": "Direct data copy from a file to a sql server table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"store_id": "store_id",
									"date_id": "date_id",
									"product_id": "product_id",
									"stock_amt": "stock_amt"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlob_storesales_store01_single",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_storesales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"variables": {
					"var_file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sample Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataVault_Customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_customer_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceCustomer",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Customer",
								"type": "DatasetReference"
							},
							"name": "HubCustomer",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Customer_Latest",
								"type": "DatasetReference"
							},
							"name": "SatCustomer",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_CustomerGeography",
								"type": "DatasetReference"
							},
							"name": "LinkCustomerGeography",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Customer",
								"type": "DatasetReference"
							},
							"name": "SinkHubCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Customer",
								"type": "DatasetReference"
							},
							"name": "SinkSatCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_CustomerGeography",
								"type": "DatasetReference"
							},
							"name": "SinkLinkCustomerGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewCustomer"
						},
						{
							"name": "NewHubCustomer"
						},
						{
							"name": "CheckNewSatCustomer"
						},
						{
							"name": "NewSatCustomer"
						},
						{
							"name": "CheckNewLinkCustomerGeography"
						},
						{
							"name": "NewLinkCustomerGeography"
						}
					],
					"script": "\n\nsource(output(\n\t\tCustomerAlternateKey as string,\n\t\tGeographyAlternateKey as string,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tNameStyle as string,\n\t\tBirthDate as string,\n\t\tMaritalStatus as string,\n\t\tSuffix as string,\n\t\tGender as string,\n\t\tEmailAddress as string,\n\t\tYearlyIncome as string,\n\t\tTotalChildren as string,\n\t\tNumberChildrenAtHome as string,\n\t\tHouseOwnerFlag as string,\n\t\tNumberCarsOwned as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SourceCustomer\nsource(output(\n\t\tHUB_Customer_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubCustomer\nsource(output(\n\t\tHUB_Customer_HK as string,\n\t\tSAT_Customer_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SatCustomer\nsource(output(\n\t\tLINK_CustomerGeography_HK as string,\n\t\tHUB_Customer_HK as string,\n\t\tHUB_Geography_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LinkCustomerGeography\nSourceCustomer derive(LINK_CustomerGeography_HK = sha2(512, CustomerAlternateKey, GeographyAlternateKey),\n\t\tHUB_Customer_HK = sha2(512, CustomerAlternateKey),\n\t\tHUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tSAT_Customer_HDIFF = sha2(512, CustomerAlternateKey, GeographyAlternateKey,Title,FirstName,MiddleName,LastName,NameStyle,BirthDate,MaritalStatus,Suffix,Gender,EmailAddress,YearlyIncome,TotalChildren,NumberChildrenAtHome,HouseOwnerFlag,NumberCarsOwned,AddressLine1,AddressLine2),\n\t\tLOAD_TS = currentTimestamp()) ~> HashColumns\nHashColumns, HubCustomer exists(HashColumns@HUB_Customer_HK == HubCustomer@HUB_Customer_HK,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewCustomer\nCheckNewCustomer select(mapColumn(\n\t\tCustomerAlternateKey,\n\t\tHUB_Customer_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewHubCustomer\nHashColumns, SatCustomer exists(HashColumns@HUB_Customer_HK == SatCustomer@HUB_Customer_HK\n\t&& HashColumns@SAT_Customer_HDIFF == SatCustomer@SAT_Customer_HDIFF,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewSatCustomer\nCheckNewSatCustomer select(mapColumn(\n\t\tTitle,\n\t\tFirstName,\n\t\tMiddleName,\n\t\tLastName,\n\t\tNameStyle,\n\t\tBirthDate,\n\t\tMaritalStatus,\n\t\tSuffix,\n\t\tGender,\n\t\tEmailAddress,\n\t\tYearlyIncome,\n\t\tTotalChildren,\n\t\tNumberChildrenAtHome,\n\t\tHouseOwnerFlag,\n\t\tNumberCarsOwned,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tHUB_Customer_HK,\n\t\tSAT_Customer_HDIFF,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewSatCustomer\nHashColumns, LinkCustomerGeography exists(HashColumns@LINK_CustomerGeography_HK == LinkCustomerGeography@LINK_CustomerGeography_HK,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewLinkCustomerGeography\nCheckNewLinkCustomerGeography select(mapColumn(\n\t\tCustomerAlternateKey,\n\t\tGeographyAlternateKey,\n\t\tLINK_CustomerGeography_HK,\n\t\tHUB_Customer_HK,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewLinkCustomerGeography\nNewHubCustomer sink(input(\n\t\tHUB_Customer_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkHubCustomer\nNewSatCustomer sink(input(\n\t\tHUB_Customer_HK as string,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tNameStyle as boolean,\n\t\tBirthDate as date,\n\t\tMaritalStatus as string,\n\t\tSuffix as string,\n\t\tGender as string,\n\t\tEmailAddress as string,\n\t\tYearlyIncome as decimal(19,4),\n\t\tTotalChildren as integer,\n\t\tNumberChildrenAtHome as integer,\n\t\tHouseOwnerFlag as string,\n\t\tNumberCarsOwned as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tSAT_Customer_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkSatCustomer\nNewLinkCustomerGeography sink(input(\n\t\tLINK_CustomerGeography_HK as string,\n\t\tHUB_Customer_HK as string,\n\t\tHUB_Geography_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkLinkCustomerGeography"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataVault_Geography')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_geography_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceGeogrpahy",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "HubGeography",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography_Latest",
								"type": "DatasetReference"
							},
							"name": "SatGeography",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkHubGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkSatGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewGeography"
						},
						{
							"name": "NewHubGeography"
						},
						{
							"name": "CheckNewSatGeography"
						},
						{
							"name": "NewSatGeography"
						}
					],
					"script": "\n\nsource(output(\n\t\tGeographyAlternateKey as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SourceGeogrpahy\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tSAT_Geography_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SatGeography\nSourceGeogrpahy derive(HUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tLOAD_TS = currentTimestamp(),\n\t\tSAT_Geography_HDIFF = sha2(512, GeographyAlternateKey, City, StateProvinceCode, StateProvinceName, CountryRegionCode, EnglishCountryRegionName, PostalCode)) ~> HashColumns\nHashColumns, HubGeography exists(HashColumns@HUB_Geography_HK == HubGeography@HUB_Geography_HK,\n\tnegate:true,\n\tbroadcast: 'both')~> CheckNewGeography\nCheckNewGeography select(mapColumn(\n\t\tGeographyAlternateKey,\n\t\tLOAD_TS,\n\t\tHUB_Geography_HK\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewHubGeography\nHashColumns, SatGeography exists(HashColumns@HUB_Geography_HK == SatGeography@HUB_Geography_HK\n\t&& HashColumns@SAT_Geography_HDIFF == SatGeography@SAT_Geography_HDIFF,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewSatGeography\nCheckNewSatGeography select(mapColumn(\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS,\n\t\tSAT_Geography_HDIFF\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewSatGeography\nNewHubGeography sink(input(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkHubGeography\nNewSatGeography sink(input(\n\t\tHUB_Geography_HK as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string,\n\t\tSAT_Geography_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tSAT_Geography_HDIFF,\n\t\tLOAD_TS\n\t)) ~> SinkSatGeography"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataVault_InternetSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_internetsales_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceInternetSales",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_InternetSales",
								"type": "DatasetReference"
							},
							"name": "LinkInternetSales",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_InternetSales_Latest",
								"type": "DatasetReference"
							},
							"name": "SatInternetSales",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_InternetSales",
								"type": "DatasetReference"
							},
							"name": "SinkLinkInternetSales"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_InternetSales",
								"type": "DatasetReference"
							},
							"name": "SinkSatInternetSales"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewLinkInternetSales"
						},
						{
							"name": "NewLinkInternetSales"
						},
						{
							"name": "CheckNewSatInternetSales"
						},
						{
							"name": "NewSatProduct"
						}
					],
					"script": "\n\nsource(output(\n\t\tProductAlternateKey as string,\n\t\tCustomerAlternateKey as string,\n\t\tSalesOrderNumber as string,\n\t\tSalesOrderLineNumber as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderQuantity as integer,\n\t\tUnitPrice as double,\n\t\tExtendedAmount as double,\n\t\tUnitPriceDiscountPct as double,\n\t\tDiscountAmount as double,\n\t\tProductStandardCost as double,\n\t\tTotalProductCost as double,\n\t\tSalesAmount as double,\n\t\tTaxAmt as double,\n\t\tFreight as double,\n\t\tCarrierTrackingNumber as string,\n\t\tCustomerPONumber as string,\n\t\tOrderDate as date,\n\t\tDueDate as date,\n\t\tShipDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SourceInternetSales\nsource(output(\n\t\tLINK_InternetSales_HK as string,\n\t\tHUB_Customer_HK as string,\n\t\tHUB_Product_HK as string,\n\t\tProductAlternateKey as string,\n\t\tCustomerAlternateKey as string,\n\t\tSalesOrderNumber as string,\n\t\tSalesOrderLineNumber as integer,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LinkInternetSales\nsource(output(\n\t\tLINK_InternetSales_HK as string,\n\t\tSAT_InternetSales_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SatInternetSales\nSourceInternetSales derive(LINK_InternetSales_HK = sha2(512, ProductAlternateKey,CustomerAlternateKey,SalesOrderNumber,SalesOrderLineNumber),\n\t\tHUB_Customer_HK = sha2(512, CustomerAlternateKey),\n\t\tLOAD_TS = currentTimestamp(),\n\t\tHUB_Product_HK = sha2(512, ProductAlternateKey),\n\t\tSAT_InternetSales_HDIFF = sha2(512, ProductAlternateKey,CustomerAlternateKey,SalesOrderNumber,SalesOrderLineNumber,RevisionNumber,OrderQuantity,UnitPrice,ExtendedAmount,UnitPriceDiscountPct,DiscountAmount,ProductStandardCost,TotalProductCost,SalesAmount,TaxAmt,Freight,CarrierTrackingNumber,CustomerPONumber,OrderDate,DueDate)) ~> HashColumns\nHashColumns, LinkInternetSales exists(HashColumns@LINK_InternetSales_HK == LinkInternetSales@LINK_InternetSales_HK,\n\tnegate:true,\n\tbroadcast: 'both')~> CheckNewLinkInternetSales\nCheckNewLinkInternetSales select(mapColumn(\n\t\tProductAlternateKey,\n\t\tCustomerAlternateKey,\n\t\tSalesOrderNumber,\n\t\tSalesOrderLineNumber,\n\t\tLINK_InternetSales_HK,\n\t\tHUB_Customer_HK,\n\t\tLOAD_TS,\n\t\tHUB_Product_HK\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewLinkInternetSales\nHashColumns, SatInternetSales exists(HashColumns@LINK_InternetSales_HK == SatInternetSales@LINK_InternetSales_HK\n\t&& HashColumns@SAT_InternetSales_HDIFF == SatInternetSales@SAT_InternetSales_HDIFF,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewSatInternetSales\nCheckNewSatInternetSales select(mapColumn(\n\t\tRevisionNumber,\n\t\tOrderQuantity,\n\t\tUnitPrice,\n\t\tExtendedAmount,\n\t\tUnitPriceDiscountPct,\n\t\tDiscountAmount,\n\t\tProductStandardCost,\n\t\tTotalProductCost,\n\t\tSalesAmount,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tCarrierTrackingNumber,\n\t\tCustomerPONumber,\n\t\tOrderDate,\n\t\tDueDate,\n\t\tShipDate,\n\t\tLINK_InternetSales_HK,\n\t\tLOAD_TS,\n\t\tSAT_InternetSales_HDIFF\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewSatProduct\nNewLinkInternetSales sink(input(\n\t\tLINK_InternetSales_HK as string,\n\t\tHUB_Customer_HK as string,\n\t\tHUB_Product_HK as string,\n\t\tProductAlternateKey as string,\n\t\tCustomerAlternateKey as string,\n\t\tSalesOrderNumber as string,\n\t\tSalesOrderLineNumber as integer,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkLinkInternetSales\nNewSatProduct sink(input(\n\t\tLINK_InternetSales_HK as string,\n\t\tRevisionNumber as integer,\n\t\tOrderQuantity as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tExtendedAmount as decimal(19,4),\n\t\tUnitPriceDiscountPct as double,\n\t\tDiscountAmount as double,\n\t\tProductStandardCost as decimal(19,4),\n\t\tTotalProductCost as decimal(19,4),\n\t\tSalesAmount as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tCarrierTrackingNumber as string,\n\t\tCustomerPONumber as string,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tSAT_InternetSales_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkSatInternetSales"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataVault_Product')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_product_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceProduct",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Product",
								"type": "DatasetReference"
							},
							"name": "HubProduct",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Product_Latest",
								"type": "DatasetReference"
							},
							"name": "SatProduct",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Product",
								"type": "DatasetReference"
							},
							"name": "SinkHubProduct"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Product",
								"type": "DatasetReference"
							},
							"name": "SinkSatProduct"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewProduct"
						},
						{
							"name": "NewHubProduct"
						},
						{
							"name": "CheckNewSatProduct"
						},
						{
							"name": "NewSatProduct"
						}
					],
					"script": "\n\nsource(output(\n\t\tProductAlternateKey as string,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tStandardCost as double,\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as short,\n\t\tReorderPoint as short,\n\t\tListPrice as double,\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tModelName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SourceProduct\nsource(output(\n\t\tHUB_Product_HK as string,\n\t\tProductAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubProduct\nsource(output(\n\t\tHUB_Product_HK as string,\n\t\tSAT_Product_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SatProduct\nSourceProduct derive(HUB_Product_HK = sha2(512, ProductAlternateKey),\n\t\tSAT_Product_HDIFF = sha2(512, ProductAlternateKey\r\n      ,WeightUnitMeasureCode\r\n      ,SizeUnitMeasureCode\r\n      ,EnglishProductName\r\n      ,StandardCost\r\n      ,FinishedGoodsFlag\r\n      ,Color\r\n      ,SafetyStockLevel\r\n      ,ReorderPoint\r\n      ,ListPrice\r\n      ,Size\r\n      ,SizeRange\r\n      ,Weight\r\n      ,ModelName),\n\t\tLOAD_TS = currentTimestamp()) ~> HashColumns\nHashColumns, HubProduct exists(HashColumns@HUB_Product_HK == HubProduct@HUB_Product_HK,\n\tnegate:true,\n\tbroadcast: 'both')~> CheckNewProduct\nCheckNewProduct select(mapColumn(\n\t\tProductAlternateKey,\n\t\tHUB_Product_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewHubProduct\nHashColumns, SatProduct exists(HashColumns@HUB_Product_HK == SatProduct@HUB_Product_HK\n\t&& HashColumns@SAT_Product_HDIFF == SatProduct@SAT_Product_HDIFF,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewSatProduct\nCheckNewSatProduct select(mapColumn(\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName,\n\t\tStandardCost,\n\t\tFinishedGoodsFlag,\n\t\tColor,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tListPrice,\n\t\tSize,\n\t\tSizeRange,\n\t\tWeight,\n\t\tModelName,\n\t\tHUB_Product_HK,\n\t\tSAT_Product_HDIFF,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewSatProduct\nNewHubProduct sink(input(\n\t\tHUB_Product_HK as string,\n\t\tProductAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkHubProduct\nNewSatProduct sink(input(\n\t\tHUB_Product_HK as string,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tModelName as string,\n\t\tSAT_Product_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkSatProduct"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_SQL_SAT_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_geography_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceGeography",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "HUBGeography",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography_Latest",
								"type": "DatasetReference"
							},
							"name": "SourceLastSatGeography",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkSatGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewGeography"
						},
						{
							"name": "NewGeography"
						},
						{
							"name": "CheckNewSatGeography"
						},
						{
							"name": "NewSatGeography"
						}
					],
					"script": "\n\nsource(output(\n\t\tGeographyAlternateKey as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SourceGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HUBGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tSAT_Geography_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceLastSatGeography\nSourceGeography derive(HUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tLOAD_TS = currentTimestamp(),\n\t\tSAT_Geography_HDIFF = sha2(512, GeographyAlternateKey,City,StateProvinceCode,StateProvinceName,CountryRegionCode,EnglishCountryRegionName,PostalCode)) ~> HashColumns\nHashColumns, HUBGeography exists(HashColumns@HUB_Geography_HK == HUBGeography@HUB_Geography_HK,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewGeography\nCheckNewGeography select(mapColumn(\n\t\tGeographyAlternateKey,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewGeography\nHashColumns, SourceLastSatGeography exists(HashColumns@HUB_Geography_HK == SourceLastSatGeography@HUB_Geography_HK\n\t&& HashColumns@SAT_Geography_HDIFF == SourceLastSatGeography@SAT_Geography_HDIFF,\n\tnegate:true,\n\tbroadcast: 'none')~> CheckNewSatGeography\nCheckNewSatGeography select(mapColumn(\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS,\n\t\tSAT_Geography_HDIFF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewSatGeography\nNewGeography sink(input(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tGeographyAlternateKey,\n\t\tLOAD_TS\n\t)) ~> SinkGeography\nNewSatGeography sink(input(\n\t\tHUB_Geography_HK as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string,\n\t\tSAT_Geography_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> SinkSatGeography"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DV_IncrementalLoad_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DV_Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DV_Geography",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_Product",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProduct": {},
									"HubProduct": {},
									"SatProduct": {},
									"SinkHubProduct": {},
									"SinkSatProduct": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "DV_InternetSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DV_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_InternetSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceInternetSales": {},
									"LinkInternetSales": {},
									"SatInternetSales": {},
									"SinkLinkInternetSales": {},
									"SinkSatInternetSales": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "DV_Geography",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DV_Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_Geography",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceGeogrpahy": {},
									"HubGeography": {},
									"SatGeography": {},
									"SinkHubGeography": {},
									"SinkSatGeography": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "DV_Customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_Customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCustomer": {},
									"HubCustomer": {},
									"SatCustomer": {},
									"LinkCustomerGeography": {},
									"SinkHubCustomer": {},
									"SinkSatCustomer": {},
									"SinkLinkCustomerGeography": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataVault_Product')]",
				"[concat(variables('factoryId'), '/dataflows/DataVault_InternetSales')]",
				"[concat(variables('factoryId'), '/dataflows/DataVault_Geography')]",
				"[concat(variables('factoryId'), '/dataflows/DataVault_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_SQL_SAT_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_SQL_SAT_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_SQL_SAT_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceGeography": {},
									"HUBGeography": {},
									"SourceLastSatGeography": {},
									"SinkGeography": {},
									"SinkSatGeography": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_SQL_SAT_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/event_trigger_filecreate')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "bdata_adf_variable_append_pl",
							"type": "PipelineReference"
						},
						"parameters": {
							"FilePath": "[parameters('event_trigger_filecreate_properties_bdata_adf_variable_append_pl_parameters_FilePath')]",
							"FileName": "[parameters('event_trigger_filecreate_properties_bdata_adf_variable_append_pl_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/salesdata/blobs/",
					"scope": "[parameters('event_trigger_filecreate_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/bdata_adf_variable_append_pl')]"
			]
		}
	]
}